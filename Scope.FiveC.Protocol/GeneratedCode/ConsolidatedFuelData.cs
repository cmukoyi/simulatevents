//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Option: missing-value detection (*Specified/ShouldSerialize*/Reset*) enabled
    
// Generated from: ConsolidatedFuelDataProto.proto
// Note: requires additional types generated from: EventHeaderProto.proto
// Note: requires additional types generated from: Enums/ConsolidatedFuelReasonTypeProto.proto
// Note: requires additional types generated from: Enums/FuelLevelSourceTypeProto.proto
// Note: requires additional types generated from: Enums/FuelLevelUnitOfMeasureTypeProto.proto
// Note: requires additional types generated from: Enums/FuelConsumptionSourceTypeProto.proto
// Note: requires additional types generated from: Enums/FuelConsumptionUnitOfMeasureTypeProto.proto
using Scope.FiveC.Protocol.Events.Enums;

namespace Scope.FiveC.Protocol.Events
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"ConsolidatedFuelData")]
  public partial class ConsolidatedFuelData : global::ProtoBuf.IExtensible
  {
    public ConsolidatedFuelData()
	{
		_Header = new EventHeader
		{
			TemplateId = (uint) ProtocolBufferTemplate.ConsolidatedFuelData,
		};
	}
    
    private EventHeader _Header;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"header", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public override EventHeader Header
    {
      get { return _Header; }
      set { _Header = value; }
    }
    private ConsolidatedFuelReasonType? _Reason;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"reason", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public ConsolidatedFuelReasonType Reason
    {
      get { return _Reason?? ConsolidatedFuelReasonType.CONSOLIDATED_FUEL_REASON_PERIODIC; }
      set { _Reason = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool ReasonSpecified
    {
      get { return this._Reason != null; }
      set { if (value == (this._Reason== null)) this._Reason = value ? this.Reason : (ConsolidatedFuelReasonType?)null; }
    }
    private bool ShouldSerializereason() { return ReasonSpecified; }
    private void Resetreason() { ReasonSpecified = false; }
    
    private FuelLevelSourceType? _FuelLevelSource;
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"fuel_level_source", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public FuelLevelSourceType FuelLevelSource
    {
      get { return _FuelLevelSource?? FuelLevelSourceType.FUEL_LEVEL_SOURCE_TYPE_NOT_CONFIGURED; }
      set { _FuelLevelSource = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool FuelLevelSourceSpecified
    {
      get { return this._FuelLevelSource != null; }
      set { if (value == (this._FuelLevelSource== null)) this._FuelLevelSource = value ? this.FuelLevelSource : (FuelLevelSourceType?)null; }
    }
    private bool ShouldSerializefuel_level_source() { return FuelLevelSourceSpecified; }
    private void Resetfuel_level_source() { FuelLevelSourceSpecified = false; }
    
    private FuelLevelUnitOfMeasureType? _FuelLevelUnitOfMeasure;
    [global::ProtoBuf.ProtoMember(4, IsRequired = false, Name=@"fuel_level_unit_of_measure", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public FuelLevelUnitOfMeasureType FuelLevelUnitOfMeasure
    {
      get { return _FuelLevelUnitOfMeasure?? FuelLevelUnitOfMeasureType.FUEL_LEVEL_UNIT_OF_MEASURE_PERCENTAGE; }
      set { _FuelLevelUnitOfMeasure = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool FuelLevelUnitOfMeasureSpecified
    {
      get { return this._FuelLevelUnitOfMeasure != null; }
      set { if (value == (this._FuelLevelUnitOfMeasure== null)) this._FuelLevelUnitOfMeasure = value ? this.FuelLevelUnitOfMeasure : (FuelLevelUnitOfMeasureType?)null; }
    }
    private bool ShouldSerializefuel_level_unit_of_measure() { return FuelLevelUnitOfMeasureSpecified; }
    private void Resetfuel_level_unit_of_measure() { FuelLevelUnitOfMeasureSpecified = false; }
    
    private FuelConsumptionSourceType? _CurrentFuelConsumptionSource;
    [global::ProtoBuf.ProtoMember(5, IsRequired = false, Name=@"current_fuel_consumption_source", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public FuelConsumptionSourceType CurrentFuelConsumptionSource
    {
      get { return _CurrentFuelConsumptionSource?? FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_NOT_CONFIGURED; }
      set { _CurrentFuelConsumptionSource = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool CurrentFuelConsumptionSourceSpecified
    {
      get { return this._CurrentFuelConsumptionSource != null; }
      set { if (value == (this._CurrentFuelConsumptionSource== null)) this._CurrentFuelConsumptionSource = value ? this.CurrentFuelConsumptionSource : (FuelConsumptionSourceType?)null; }
    }
    private bool ShouldSerializecurrent_fuel_consumption_source() { return CurrentFuelConsumptionSourceSpecified; }
    private void Resetcurrent_fuel_consumption_source() { CurrentFuelConsumptionSourceSpecified = false; }
    
    private FuelConsumptionUnitOfMeasureType? _CurrentFuelConsumptionUnitOfMeasure;
    [global::ProtoBuf.ProtoMember(6, IsRequired = false, Name=@"current_fuel_consumption_unit_of_measure", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public FuelConsumptionUnitOfMeasureType CurrentFuelConsumptionUnitOfMeasure
    {
      get { return _CurrentFuelConsumptionUnitOfMeasure?? FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM; }
      set { _CurrentFuelConsumptionUnitOfMeasure = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool CurrentFuelConsumptionUnitOfMeasureSpecified
    {
      get { return this._CurrentFuelConsumptionUnitOfMeasure != null; }
      set { if (value == (this._CurrentFuelConsumptionUnitOfMeasure== null)) this._CurrentFuelConsumptionUnitOfMeasure = value ? this.CurrentFuelConsumptionUnitOfMeasure : (FuelConsumptionUnitOfMeasureType?)null; }
    }
    private bool ShouldSerializecurrent_fuel_consumption_unit_of_measure() { return CurrentFuelConsumptionUnitOfMeasureSpecified; }
    private void Resetcurrent_fuel_consumption_unit_of_measure() { CurrentFuelConsumptionUnitOfMeasureSpecified = false; }
    
    private FuelConsumptionSourceType? _AverageFuelConsumptionSource;
    [global::ProtoBuf.ProtoMember(7, IsRequired = false, Name=@"average_fuel_consumption_source", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public FuelConsumptionSourceType AverageFuelConsumptionSource
    {
      get { return _AverageFuelConsumptionSource?? FuelConsumptionSourceType.FUEL_CONSUMPTION_SOURCE_TYPE_NOT_CONFIGURED; }
      set { _AverageFuelConsumptionSource = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool AverageFuelConsumptionSourceSpecified
    {
      get { return this._AverageFuelConsumptionSource != null; }
      set { if (value == (this._AverageFuelConsumptionSource== null)) this._AverageFuelConsumptionSource = value ? this.AverageFuelConsumptionSource : (FuelConsumptionSourceType?)null; }
    }
    private bool ShouldSerializeaverage_fuel_consumption_source() { return AverageFuelConsumptionSourceSpecified; }
    private void Resetaverage_fuel_consumption_source() { AverageFuelConsumptionSourceSpecified = false; }
    
    private FuelConsumptionUnitOfMeasureType? _AverageFuelConsumptionUnitOfMeasure;
    [global::ProtoBuf.ProtoMember(8, IsRequired = false, Name=@"average_fuel_consumption_unit_of_measure", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public FuelConsumptionUnitOfMeasureType AverageFuelConsumptionUnitOfMeasure
    {
      get { return _AverageFuelConsumptionUnitOfMeasure?? FuelConsumptionUnitOfMeasureType.FUEL_CONSUMPTION_UNIT_OF_MEASURE_LITERS_PER_100_KM; }
      set { _AverageFuelConsumptionUnitOfMeasure = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool AverageFuelConsumptionUnitOfMeasureSpecified
    {
      get { return this._AverageFuelConsumptionUnitOfMeasure != null; }
      set { if (value == (this._AverageFuelConsumptionUnitOfMeasure== null)) this._AverageFuelConsumptionUnitOfMeasure = value ? this.AverageFuelConsumptionUnitOfMeasure : (FuelConsumptionUnitOfMeasureType?)null; }
    }
    private bool ShouldSerializeaverage_fuel_consumption_unit_of_measure() { return AverageFuelConsumptionUnitOfMeasureSpecified; }
    private void Resetaverage_fuel_consumption_unit_of_measure() { AverageFuelConsumptionUnitOfMeasureSpecified = false; }
    
    private float? _FuelLevel;
    [global::ProtoBuf.ProtoMember(9, IsRequired = false, Name=@"fuel_level", DataFormat = global::ProtoBuf.DataFormat.FixedSize)]
    public float FuelLevel
    {
      get { return _FuelLevel?? default(float); }
      set { _FuelLevel = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool FuelLevelSpecified
    {
      get { return this._FuelLevel != null; }
      set { if (value == (this._FuelLevel== null)) this._FuelLevel = value ? this.FuelLevel : (float?)null; }
    }
    private bool ShouldSerializefuel_level() { return FuelLevelSpecified; }
    private void Resetfuel_level() { FuelLevelSpecified = false; }
    
    private float? _CurrentFuelConsumption;
    [global::ProtoBuf.ProtoMember(10, IsRequired = false, Name=@"current_fuel_consumption", DataFormat = global::ProtoBuf.DataFormat.FixedSize)]
    public float CurrentFuelConsumption
    {
      get { return _CurrentFuelConsumption?? default(float); }
      set { _CurrentFuelConsumption = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool CurrentFuelConsumptionSpecified
    {
      get { return this._CurrentFuelConsumption != null; }
      set { if (value == (this._CurrentFuelConsumption== null)) this._CurrentFuelConsumption = value ? this.CurrentFuelConsumption : (float?)null; }
    }
    private bool ShouldSerializecurrent_fuel_consumption() { return CurrentFuelConsumptionSpecified; }
    private void Resetcurrent_fuel_consumption() { CurrentFuelConsumptionSpecified = false; }
    
    private float? _AverageFuelConsumption;
    [global::ProtoBuf.ProtoMember(11, IsRequired = false, Name=@"average_fuel_consumption", DataFormat = global::ProtoBuf.DataFormat.FixedSize)]
    public float AverageFuelConsumption
    {
      get { return _AverageFuelConsumption?? default(float); }
      set { _AverageFuelConsumption = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool AverageFuelConsumptionSpecified
    {
      get { return this._AverageFuelConsumption != null; }
      set { if (value == (this._AverageFuelConsumption== null)) this._AverageFuelConsumption = value ? this.AverageFuelConsumption : (float?)null; }
    }
    private bool ShouldSerializeaverage_fuel_consumption() { return AverageFuelConsumptionSpecified; }
    private void Resetaverage_fuel_consumption() { AverageFuelConsumptionSpecified = false; }
    
    private int? _AmbientTemperature;
    [global::ProtoBuf.ProtoMember(12, IsRequired = false, Name=@"ambient_temperature", DataFormat = global::ProtoBuf.DataFormat.ZigZag)]
    public int AmbientTemperature
    {
      get { return _AmbientTemperature?? default(int); }
      set { _AmbientTemperature = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool AmbientTemperatureSpecified
    {
      get { return this._AmbientTemperature != null; }
      set { if (value == (this._AmbientTemperature== null)) this._AmbientTemperature = value ? this.AmbientTemperature : (int?)null; }
    }
    private bool ShouldSerializeambient_temperature() { return AmbientTemperatureSpecified; }
    private void Resetambient_temperature() { AmbientTemperatureSpecified = false; }
    
    private int? _AltitudeMeters;
    [global::ProtoBuf.ProtoMember(13, IsRequired = false, Name=@"altitude_meters", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int AltitudeMeters
    {
      get { return _AltitudeMeters?? default(int); }
      set { _AltitudeMeters = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool AltitudeMetersSpecified
    {
      get { return this._AltitudeMeters != null; }
      set { if (value == (this._AltitudeMeters== null)) this._AltitudeMeters = value ? this.AltitudeMeters : (int?)null; }
    }
    private bool ShouldSerializealtitude_meters() { return AltitudeMetersSpecified; }
    private void Resetaltitude_meters() { AltitudeMetersSpecified = false; }
    
    private uint? _TripDistanceMeters;
    [global::ProtoBuf.ProtoMember(14, IsRequired = false, Name=@"trip_distance_meters", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint TripDistanceMeters
    {
      get { return _TripDistanceMeters?? default(uint); }
      set { _TripDistanceMeters = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool TripDistanceMetersSpecified
    {
      get { return this._TripDistanceMeters != null; }
      set { if (value == (this._TripDistanceMeters== null)) this._TripDistanceMeters = value ? this.TripDistanceMeters : (uint?)null; }
    }
    private bool ShouldSerializetrip_distance_meters() { return TripDistanceMetersSpecified; }
    private void Resettrip_distance_meters() { TripDistanceMetersSpecified = false; }
    
    private uint? _TripDurationSeconds;
    [global::ProtoBuf.ProtoMember(15, IsRequired = false, Name=@"trip_duration_seconds", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint TripDurationSeconds
    {
      get { return _TripDurationSeconds?? default(uint); }
      set { _TripDurationSeconds = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool TripDurationSecondsSpecified
    {
      get { return this._TripDurationSeconds != null; }
      set { if (value == (this._TripDurationSeconds== null)) this._TripDurationSeconds = value ? this.TripDurationSeconds : (uint?)null; }
    }
    private bool ShouldSerializetrip_duration_seconds() { return TripDurationSecondsSpecified; }
    private void Resettrip_duration_seconds() { TripDurationSecondsSpecified = false; }
    
    private uint? _AccuracyPercentage;
    [global::ProtoBuf.ProtoMember(16, IsRequired = false, Name=@"accuracy_percentage", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint AccuracyPercentage
    {
      get { return _AccuracyPercentage?? default(uint); }
      set { _AccuracyPercentage = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool AccuracyPercentageSpecified
    {
      get { return this._AccuracyPercentage != null; }
      set { if (value == (this._AccuracyPercentage== null)) this._AccuracyPercentage = value ? this.AccuracyPercentage : (uint?)null; }
    }
    private bool ShouldSerializeaccuracy_percentage() { return AccuracyPercentageSpecified; }
    private void Resetaccuracy_percentage() { AccuracyPercentageSpecified = false; }
    
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}